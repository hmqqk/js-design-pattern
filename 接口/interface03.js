/**
 * 3.鸭式变形法:像鸭子一样走路并且会嘎嘎叫的东西就是鸭子
 * 换言之
 * 如果对象具有与接口定义的方法名字的同名所有方法 则认为实现本接口
 */
(function(){
	//定义一个接口类
	var Interface = function(name,methods){
		if(arguments.length != 2){
			alert("interface must have two paramters...");
		}
		this.name = name;
		this.methods = [];
		for (var i = 0; i < methods.length; i++) {
			if(typeof methods[i] != "string"){
				alert("method name must is String ...")
			}else{
				this.methods.push(methods[i])
			}
		}
	}
	//定义接口的一个静态方法来实现接口与实现类的直接检验
	//静态方法不要写成Interface.prototype.* 因为这是写到接口原型连上的
	//将静态的函数直接写到类层次上
	Interface.ensureImplements = function(object){
		if(arguments.length<2){
			alert("必须最少是2个参数");
			return false;
		}
		//遍历
		for (var i = 1; i < arguments.length; i++) {
			var inter = arguments[i];
			if(inter.constructor != Interface){
				throw new Error("if is interface class must is Interface type");
			}
			for (var j = 0; j < inter.methods.length; j++) {
				var method = inter.methods[j];
				if(!object[method] || typeof object[method] != "function"){
					throw new Error("实现类并且没有完全实现接口中的所有方法...");
				}
			}
		}
	}
	//应用
	var GridMananger = new Interface("GridMananger",["add","remove","list"]);
	var FormMananger = new Interface("FormMananger",["save"])
	
	function commManager(){
		//先实现方法
		this.add = function(){
			//coding
		}
		this.remove = function(){
			//coding
			}
		this.list = function(){
			//coding
			}
		this.save = function(){
			//coding
			}
		//检验
		Interface.ensureImplements(this,GridMananger,FormMananger)
	}
	var c = new commManager();
	c.add();
	/**
	 * 接口的重要性
	 * 1.大型项目提高代码的灵活度
	 * 2.松耦合
	 * 3.在团队开发的时候,有时候你在真正编码之前就可以写API(自己的类库)
	 */
	
})()



